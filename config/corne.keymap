/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <32 33>;
        };

        erase_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <7 8 9>;
        };

        delete_word {
            bindings = <&kp LC(DELETE)>;
            key-positions = <31 32 33>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        toggle_game_layer {
            bindings = <&tog 0>;
            key-positions = <0 11>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <4 17>;
        };

        quit {
            bindings = <&kp LA(F4)>;
            key-positions = <0 38>;
        };
    };

    behaviors {
        hold_tap_layer: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    macros {
        single_quotes: single_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
            label = "SINGLE_QUOTES";
        };

        double_quotes: double_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
            label = "DOUBLE_QUOTES";
        };

        backtick: backtick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "BACKTICK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R  &kp T             &kp Y                         &kp U                &kp I         &kp O    &kp P          &kp BACKSPACE
&kp LSHFT  &kp A  &kp S  &kp D     &kp F  &kp G             &kp H                         &kp J                &kp K         &kp L    &kp SEMICOLON  &kp RIGHT_SHIFT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V  &kp B             &kp N                         &kp M                &kp COMMA     &kp DOT  &kp FSLH       &kp LCTRL
                         &kp LGUI  &mo 1  &mt LALT SPACE    &mt LA(LC(LEFT_SHIFT)) ENTER  &hold_tap_layer 2 3  &kp LEFT_GUI
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LS(N1)    &kp LS(N2)  &kp LS(N3)    &kp LS(N4)    &kp LS(N5)    &kp LS(N6)    &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &trans
&trans  &kp NUMBER_1  &kp N       &kp NUMBER_3  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N7      &kp N8      &kp N9      &kp N0      &trans
&trans  &kp F1        &kp F2      &kp F3        &kp F4        &kp F5        &kp F6        &kp F11     &kp COMMA   &kp PERIOD  &kp F12     &trans
                                  &trans        &trans        &trans        &trans        &trans      &trans
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans     &kp RIGHT_BRACE        &kp LEFT_BRACE        &trans       &backtick       &kp PLUS        &trans        &trans    &trans         &trans
&trans  &trans  &kp EQUAL  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &kp MINUS    &single_quotes  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN  &kp RIGHT      &trans
&trans  &trans  &trans     &kp RIGHT_BRACKET      &kp LEFT_BRACKET      &kp UNDER    &double_quotes  &kp PIPE        &trans        &trans    &kp BACKSLASH  &trans
                           &trans                 &trans                &trans       &trans          &trans          &trans
            >;
        };

        diacritics {
            bindings = <
&trans  &trans  &trans            &trans         &trans          &trans       &trans  &trans    &trans        &trans  &trans  &trans
&trans  &trans  &kp LS(NUMBER_6)  &kp LS(GRAVE)  &kp APOSTROPHE  &kp GRAVE    &trans  &kp EXCL  &kp QUESTION  &trans  &trans  &trans
&none   &trans  &trans            &trans         &trans          &trans       &trans  &trans    &trans        &trans  &trans  &trans
                                  &trans         &trans          &trans       &trans  &trans    &trans
            >;
        };

        functions {
            bindings = <
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans          &trans         &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_MUTE  &sys_reset
&trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp PAGE_UP    &kp PRINTSCREEN   &kp INSERT         &trans        &trans      &trans
&trans          &trans        &trans        &trans        &trans        &trans          &kp PAGE_DOWN  &kp HOME          &kp END            &trans        &trans      &trans
                                            &trans        &trans        &trans          &trans         &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        functions {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
